type Client @aws_iam @aws_api_key {
  id: ID!
  codeID: ID!
  name: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Codes(filter: ModelCodeFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCodeConnection @aws_iam @aws_api_key
}

type Code @aws_iam @aws_api_key {
  id: ID!
  clientID: ID!
  userID: ID!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Clients(filter: ModelClientFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelClientConnection @aws_iam @aws_api_key
  User: User @aws_iam @aws_api_key
}

type User @aws_iam @aws_api_key {
  id: ID!
  email: String!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Codes(filter: ModelCodeFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCodeConnection @aws_iam @aws_api_key
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelClientConnection @aws_api_key @aws_iam {
  items: [Client]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelClientFilterInput {
  id: ModelIDInput
  codeID: ModelIDInput
  name: ModelStringInput
  and: [ModelClientFilterInput]
  or: [ModelClientFilterInput]
  not: ModelClientFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getClient(id: ID!): Client @aws_api_key @aws_iam
  listClients(filter: ModelClientFilterInput, limit: Int, nextToken: String): ModelClientConnection @aws_api_key @aws_iam
  syncClients(filter: ModelClientFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelClientConnection @aws_api_key @aws_iam
  getCode(id: ID!): Code @aws_api_key @aws_iam
  listCodes(filter: ModelCodeFilterInput, limit: Int, nextToken: String): ModelCodeConnection @aws_api_key @aws_iam
  syncCodes(filter: ModelCodeFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCodeConnection @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_api_key @aws_iam
}

input CreateClientInput {
  id: ID
  codeID: ID!
  name: String
  _version: Int
}

input UpdateClientInput {
  id: ID!
  codeID: ID
  name: String
  _version: Int
}

input DeleteClientInput {
  id: ID
  _version: Int
}

type Mutation {
  createClient(input: CreateClientInput!, condition: ModelClientConditionInput): Client @aws_api_key @aws_iam
  updateClient(input: UpdateClientInput!, condition: ModelClientConditionInput): Client @aws_api_key @aws_iam
  deleteClient(input: DeleteClientInput!, condition: ModelClientConditionInput): Client @aws_api_key @aws_iam
  createCode(input: CreateCodeInput!, condition: ModelCodeConditionInput): Code @aws_api_key @aws_iam
  updateCode(input: UpdateCodeInput!, condition: ModelCodeConditionInput): Code @aws_api_key @aws_iam
  deleteCode(input: DeleteCodeInput!, condition: ModelCodeConditionInput): Code @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
}

input ModelClientConditionInput {
  codeID: ModelIDInput
  name: ModelStringInput
  and: [ModelClientConditionInput]
  or: [ModelClientConditionInput]
  not: ModelClientConditionInput
}

type Subscription {
  onCreateClient: Client @aws_subscribe(mutations: ["createClient"]) @aws_api_key @aws_iam
  onUpdateClient: Client @aws_subscribe(mutations: ["updateClient"]) @aws_api_key @aws_iam
  onDeleteClient: Client @aws_subscribe(mutations: ["deleteClient"]) @aws_api_key @aws_iam
  onCreateCode: Code @aws_subscribe(mutations: ["createCode"]) @aws_api_key @aws_iam
  onUpdateCode: Code @aws_subscribe(mutations: ["updateCode"]) @aws_api_key @aws_iam
  onDeleteCode: Code @aws_subscribe(mutations: ["deleteCode"]) @aws_api_key @aws_iam
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
}

type ModelCodeConnection @aws_api_key @aws_iam {
  items: [Code]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCodeFilterInput {
  id: ModelIDInput
  clientID: ModelIDInput
  userID: ModelIDInput
  and: [ModelCodeFilterInput]
  or: [ModelCodeFilterInput]
  not: ModelCodeFilterInput
}

input CreateCodeInput {
  id: ID
  clientID: ID!
  userID: ID!
  _version: Int
  codeUserId: ID
}

input UpdateCodeInput {
  id: ID!
  clientID: ID
  userID: ID
  _version: Int
  codeUserId: ID
}

input DeleteCodeInput {
  id: ID
  _version: Int
}

input ModelCodeConditionInput {
  clientID: ModelIDInput
  userID: ModelIDInput
  and: [ModelCodeConditionInput]
  or: [ModelCodeConditionInput]
  not: ModelCodeConditionInput
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  email: String!
  _version: Int
}

input UpdateUserInput {
  id: ID!
  email: String
  _version: Int
}

input DeleteUserInput {
  id: ID
  _version: Int
}

input ModelUserConditionInput {
  email: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}
